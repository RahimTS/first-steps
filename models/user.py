from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Optional
import secrets

from pydantic import BaseModel, Field, field_validator


class Gender(str, Enum):
    male = "male"
    female = "female"
    other = "other"


class AgeGroup(str, Enum):
    child = "child"
    teen = "teen"
    adult = "adult"
    senior = "senior"


def generate_short_hex_id() -> str:
    """Generate a 12-hex-character unique-looking id (not guaranteed unique)."""
    return secrets.token_hex(6)


class UserCreate(BaseModel):
    """Incoming payload for creating a user."""

    name: str = Field(..., min_length=1, description="Full name of the user")
    gender: Gender = Field(..., description="Gender of the user")
    age_group: AgeGroup = Field(..., description="Age group of the user")


class UserDB(BaseModel):
    """User model persisted in the database.

    Notes:
    - `id` is a short hex string (<=12 chars). Generated by default.
    - `user_index` is an auto-incrementing integer maintained by the repository.
    - `createdDate` is set to datetime.now() by default.
    """

    id: str = Field(default_factory=generate_short_hex_id, description="Unique hex id, max 12 chars")
    user_index: Optional[int] = Field(default=None, description="Auto incrementing index assigned by repository")
    name: str
    gender: Gender
    age_group: AgeGroup
    createdDate: datetime = Field(default_factory=datetime.now)

    @field_validator("id")
    @classmethod
    def validate_id_length(cls, value: str) -> str:
        if len(value) > 12:
            raise ValueError("id must not exceed 12 hex characters")
        return value


class UserOut(BaseModel):
    """Response model for returning user data to clients."""

    id: str
    user_index: int
    name: str
    gender: Gender
    age_group: AgeGroup
    createdDate: datetime
